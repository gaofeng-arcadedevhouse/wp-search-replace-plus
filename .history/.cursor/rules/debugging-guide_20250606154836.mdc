---
description:
globs:
alwaysApply: false
---
# Debugging and Troubleshooting Guide

## Debug Logging
The plugin uses extensive error logging throughout the codebase. To enable debug mode:
1. Set `WP_DEBUG` to `true` in `wp-config.php`
2. Check WordPress error logs for plugin-specific messages prefixed with "WTSR:"

## Common Debug Locations

### JavaScript Console
- [assets/js/admin.js](mdc:assets/js/admin.js) contains extensive console.log statements
- Look for "WTSR:" prefixed messages in browser developer tools
- Check AJAX request/response data in Network tab

### PHP Error Logs
- All handler classes use `error_log()` with contextual information
- Database operations log query details and results
- File operations log paths and permission issues
- ACF operations log field detection and updates

## Debugging Specific Issues

### ACF Fields Not Found
1. Check if ACF plugin is active: `function_exists('get_field_object')`
2. Verify field keys are being retrieved: Look for "WTSR: ACF field object:" in logs
3. Check post type compatibility: Ensure ACF fields are assigned to searched post types

### Custom Post Types Not Appearing
1. Verify post type registration: Check `get_post_types()` output in logs
2. Look for "WTSR: All post types available:" and "WTSR: Public custom post types:" messages
3. Check if post type has content: Search may skip empty post types

### File Search Issues
1. Check theme directory permissions: Files must be readable
2. Verify file size limits: Files over 2MB are skipped by default
3. Check file extensions: Only PHP files are scanned by default in [includes/class-file-scanner.php](mdc:includes/class-file-scanner.php)

### Modal Display Problems
1. Check CSS class application: Look for `.wtsr-modal-show` class on modal elements
2. Verify z-index conflicts: Modals use z-index 100000+
3. Check for JavaScript errors preventing modal show/hide functions

### Performance Issues
1. Monitor memory usage: Plugin includes memory management functions
2. Check result set size: Large result sets may cause timeouts
3. Verify pagination settings: Adjust `resultsPerPage` in JavaScript
4. Database query limits: Check `per_page` settings in search options

## Common Error Messages

### "Database handler initialization failed"
- Check database connection
- Verify WordPress database configuration
- Look for PHP fatal errors in handler class loading

### "ACF field search requires Advanced Custom Fields plugin"
- Install and activate ACF plugin
- Or disable ACF search scope in admin interface

### "No valid items to replace"
- Verify items are selected before replace operation
- Check if search results contain valid data
- Look for JSON parsing errors in replace handler

### "File is not writable"
- Check file permissions on theme files
- Verify WordPress file permission settings
- Check for file locks or editor conflicts

## Performance Monitoring
- Database query count and execution time logged
- File scan duration and count tracked
- Memory usage monitored during operations
- AJAX request timing recorded in browser developer tools

## Testing Checklist
1. **Search Functionality**: Test all content types (posts, pages, ACF, custom fields, comments, files)
2. **Replace Operations**: Verify backup creation, actual replacements, and result display
3. **Modal Interactions**: Test show/hide animations, button functionality, background click behavior
4. **Error Handling**: Test with invalid input, missing permissions, and plugin conflicts
5. **Performance**: Test with large datasets, multiple file types, and concurrent operations
